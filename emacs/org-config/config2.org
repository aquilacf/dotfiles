#+TITLE: This is my personal emacs configuration.
#+AUTHOR: √Åquila Freitas

* Early Initialization
  :PROPERTIES:
  :header-args: :tangle ~/.config/emacs/early-init.el :results none
  :END:

** Boost startup

*** GC Threshold

    Brief description about the GC threshold.
    #+begin_src emacs-lisp
      (defconst GC_CONST_THREASHOLD_ORIGINAL gc-cons-threshold)
      (setq gc-cons-threshold most-positive-fixnum)
    #+end_src

    Brief description about filename handler list.
    #+begin_src emacs-lisp
      (defconst FILE_NAME_HANDLER_ALIST_ORIGINAL file-name-handler-alist)
      (setq file-name-handler-alist nil)
    #+end_src

    Reset GC
    #+begin_src emacs-lisp
      (add-hook 'after-init-hook
		`(lambda ()
		   (setq gc-cons-threshold GC_CONST_THREASHOLD_ORIGINAL)
		   (setq file-name-handler-alist FILE_NAME_HANDLER_ALIST_ORIGINAL)
		   ) t)
    #+end_src

    Run Garbage Collection if emacs goes idle.
    #+begin_src emacs-lisp
      (run-with-idle-timer 5 t #'garbage-collect)
    #+end_src

** Settings

*** Define constants

    #+begin_src emacs-lisp
      (defconst OFF -1)
      (defconst FALSE nil)
      (defconst TRUE t)
      (defconst ON 1)

      (defconst DIR_ROOT (expand-file-name user-emacs-directory))
      (defconst DIR_SNIPPETS (concat DIR_ROOT "snippets/"))
    #+end_src

    #+begin_src emacs-lisp
      (setq custom-file (concat DIR_ROOT "custom.el"))
      (load custom-file 'noerror 'nomessage)
      (fset 'yes-or-no-p 'y-or-n-p)
    #+end_src

**** OS Specific

     Define OS.
     #+begin_src emacs-lisp
       (defconst IS_TERMINAL  (not (display-graphic-p)))
       (defconst IS_MAC       (eq system-type 'darwin))
       (defconst IS_LINUX     (eq system-type 'gnu/linux))
       (defconst IS_WINDOWS   (memq system-type '(cygwin windows-nt ms-dos)))
     #+end_src

     Clean up unnecessary option list.
     #+begin_src emacs-lisp
       (unless IS_MAC   (setq command-line-ns-option-alist FALSE))
       (unless IS_LINUX (setq command-line-x-option-alist FALSE))
     #+end_src

*** Packages

    Disable packages at startup.
    #+begin_src emacs-lisp
      (setq package-enable-at-startup FALSE)
    #+end_src


*** Startup

    #+begin_src emacs-lisp
      (defun display-startup-echo-area-message() (message (concat "Loaded in " (emacs-init-time) ".")))

      (setq inhibit-startup-message TRUE)
      (setq inhibit-default-init TRUE)
      (setq initial-scratch-message FALSE)
      (setq initial-major-mode 'fundamental-mode)
      (setq inhibit-splash-screen TRUE)
    #+end_src

*** File

    #+begin_src emacs-lisp
      (global-auto-revert-mode TRUE)
      (setq global-auto-revert-non-file-buffers t)
      (setq create-lockfiles FALSE)
    #+end_src

    Recent files
    #+begin_src emacs-lisp
      (save-place-mode ON)
      (recentf-mode ON)
    #+end_src

    Encoding
    #+begin_src emacs-lisp
      (set-charset-priority 'unicode)
      (prefer-coding-system 'utf-8)
      (setq locale-coding-system 'utf-8)
    #+end_src

*** Screen

    #+begin_src emacs-lisp
      (menu-bar-mode OFF)
      (unless IS_TERMINAL
	(scroll-bar-mode OFF)
	(tool-bar-mode OFF)
	(tooltip-mode OFF))
    #+end_src

**** Alerts
     Visible bell
     #+begin_src emacs-lisp
       (setq visible-bell ON)
     #+end_src

**** Line numbers

     #+begin_src emacs-lisp
       (setq display-line-numbers-type 'relative)
       (global-display-line-numbers-mode)
       (global-visual-line-mode)
     #+end_src

**** Parenthesis

     #+begin_src emacs-lisp
					       ;(set-face-attribute 'show-paren-match nil :foreground 'unspecified :background 'unspecified :weight 'extra-bold :underline t)
       (setq show-paren-delay 0)
       (show-paren-mode TRUE)
       (setq show-paren-style 'parenthesis)
     #+end_src

**** Dialogs
     
     #+begin_src emacs-lisp
       (setq use-dialog-box FALSE)
     #+end_src
     
**** History

     #+begin_src emacs-lisp
       (setq history-length 30)
       (savehist-mode ON)
     #+end_src

* Initialization
  :PROPERTIES:
  :header-args: :tangle ~/.config/emacs/init.el :results none
  :END:

** Settings

*** Backups
    #+begin_src emacs-lisp
      (defconst DIR_BACKUPS (concat DIR_ROOT "backups/"))
      (setq backup-inhibited TRUE)
      (setq make-backup-files FALSE)
    #+end_src

*** Autosaves
    #+begin_src emacs-lisp
      (defconst DIR_AUTOSAVES (concat DIR_ROOT "autosaves/"))
      (setq auto-save-default FALSE)
      (setq auto-save-interval 0)
      (setq auto-save-timeout 0)
      (setq auto-save-list-file-prefix FALSE)
    #+end_src


*** Tramp

    #+begin_src emacs-lisp
      (setq tramp-default-method "ssh")
    #+end_src

*** Key bindings

**** Mouse

     #+begin_src emacs-lisp
       (xterm-mouse-mode t)

       (global-set-key (kbd "<mouse-3>") (kbd "C-y"))
       (global-set-key (kbd "<mouse-4>") (kbd "C-u 1 M-v"))
       (global-set-key (kbd "<mouse-5>") (kbd "C-u 1 C-v"))
     #+end_src

**** Keyboard

     #+begin_src emacs-lisp
       (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
       (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
     #+end_src


** Packages

*** Straight

   Bootstrap Straight
   #+begin_src emacs-lisp
     (unless (featurep 'straight)
       ;; Bootstrap straight.el
       (defvar bootstrap-version)
       (let ((bootstrap-file
	      (expand-file-name "straight/repos/straight.el/bootstrap.el" DIR_ROOT))
	     (bootstrap-version 5))
	 (unless (file-exists-p bootstrap-file)
	   (with-current-buffer
	       (url-retrieve-synchronously "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el" 'silent 'inhibit-cookies)
	     (goto-char (point-max))
	     (eval-print-last-sexp)))
	 (load bootstrap-file nil 'nomessage)))
   #+end_src

*** Use-Package

    Use straight.el for use-package expressions
    #+begin_src emacs-lisp
      (straight-use-package 'use-package)
      (straight-use-package 'use-package-ensure-system-package)
      (setq straight-use-package-by-default TRUE)
      (setq use-package-expand-minimally TRUE)
    #+end_src


*** Minor Modes

**** Which Key

     #+begin_src emacs-lisp
       (use-package which-key
	 :defer 2
	 :config (which-key-mode)
	 :custom (which-key-idle-delay 0.3))
     #+end_src

**** Rainbow

     #+begin_src emacs-lisp
       (use-package rainbow-mode
	 :defer 2
	 :config (rainbow-mode))
     #+end_src

**** Editorconfig

     #+begin_src emacs-lisp
       (use-package editorconfig
	 :defer 2
	 :config (editorconfig-mode))
     #+end_src

**** Smartparens

     #+begin_src emacs-lisp
       (use-package smartparens
	 :defer 2
	 :config (smartparens-global-mode))
     #+end_src

**** Company

     #+begin_src emacs-lisp
       (use-package company
	 :defer 2
	 :custom
	 (company-idle-delay 1)
	 (company-echo-delay 0)
	 (company-show-numbers TRUE)
	 (company-selection-wrap-around TRUE)
	 (company-minimum-prefix-length 3)
	 (company-tooltip-align-annotations TRUE)
	 (company-dabbrev-downcase FALSE)
	 :config (global-company-mode))
     #+end_src

***** Company Statistics

      #+begin_src emacs-lisp
	(use-package company-statistics
	  :after (company)
	  :config (company-statistics-mode))
      #+end_src

      
**** Theme

     Doom Emacs Theme.

     #+begin_src emacs-lisp
       (use-package doom-themes
	 :custom
	 (doom-themes-enable-bold t)
	 (doom-themes-enable-italic t)
	 :config
	 (load-theme 'doom-one t)
	 (doom-themes-org-config))
     #+end_src

***** Toggle theme

      Quickly toggle themes.

      #+begin_src emacs-lisp
	(defvar current-theme-style "d")
	(defun toggle-theme ()
	  (interactive)
	  (if (string-equal current-theme-style "d")
	      (progn
		(disable-theme 'doom-one) (load-theme 'doom-one-light t) (setq current-theme-style "l"))
	    (progn
	      (disable-theme 'doom-one-light) (load-theme 'doom-one t) (setq current-theme-style "d"))
	    ))
      #+end_src

**** Modeline

     #+begin_src emacs-lisp
       (use-package doom-modeline
	 :custom
	 (doom-modeline-height 25)
	 (doom-modeline-bar-width 1)
	 (doom-modeline-icon t)
	 (doom-modeline-major-mode-icon t)
	 (doom-modeline-major-mode-color-icon t)
	 :hook (after-init . doom-modeline-mode))
     #+end_src

**** Flycheck
     #+begin_src emacs-lisp
       (use-package flycheck 
	 :defer 2 
	 :config (global-flycheck-mode))
     #+end_src


**** LSP

     Language server protocol.

     #+begin_src emacs-lisp
       (use-package eglot
	 :defer 2)
     #+end_src

***** Yasnippet

      Code snippets.
      
      #+begin_src emacs-lisp
	(use-package yasnippet
	  :defer 2)
      #+end_src

*** Major Modes

**** C#

     #+begin_src emacs-lisp
       (use-package tree-sitter)
       (use-package tree-sitter-indent)
       (use-package tree-sitter-langs)
       (use-package csharp-mode
	 :after (tree-sitter)
	 :config

	 (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode))
	 :ensure-system-package
	 (
	  (dotnet . dotnet)
					       ;(omnisharp . "brew tap aquilacf/homebrew-omnisharp-roslyn && brew install omnisharp-mono")
	  ))

       (defun my-csharp-mode-hook ()
	 ;; enable the stuff you want for C# here
	 (electric-pair-mode 1)       ;; Emacs 24
	 (electric-pair-local-mode 1) ;; Emacs 25
	 )
       (add-hook 'csharp-mode-hook 'my-csharp-mode-hook)
     #+end_src

**** Powershell

     #+begin_src emacs-lisp
       (use-package powershell)
     #+end_src

**** TOML

     #+begin_src emacs-lisp
       (use-package toml-mode)
     #+end_src

**** Yaml

     #+begin_src emacs-lisp
       (use-package yaml-mode)
     #+end_src

     
**** Markdown

     #+begin_src emacs-lisp
       (use-package markdown-mode)
     #+end_src

**** TypeScript

     #+begin_src emacs-lisp
       (use-package typescript-mode
	 :mode ("\\.ts[x]?\\'" . typescript-mode)
	 :ensure-system-package (
	  (typescript-language-server . "yarn global add typescript-language-server")
	  (tsc . "yarn global add typescript")))
     #+end_src

**** YAML

     #+begin_src emacs-lisp
       (use-package yaml-mode
	 :ensure-system-package (yaml-language-server . "yarn global add yaml-language-server")
	 :custom (lsp-yaml-schemas t))
     #+end_src

**** JSON

     #+begin_src emacs-lisp
       (use-package json-mode
	 :ensure-system-package (vscode-json-languageserver . "yarn global add vscode-json-languageserver")
	 :custom (lsp-json-schemas t))
     #+end_src

**** GraphQL
     #+begin_src emacs-lisp
       (use-package graphql-mode
	 :ensure-system-package (graphql-lsp . "yarn global add graphql-language-service-cli graphql"))
     #+end_src

**** PHP

     #+begin_src emacs-lisp
       (use-package php-mode)
     #+end_src

**** Docker

     #+begin_src emacs-lisp
       (use-package docker
	 :bind ("C-c d" . docker))

     #+end_src

***** Dockerfile
      #+begin_src emacs-lisp
	(use-package dockerfile-mode
	  :mode "Dockerfile\\'")
      #+end_src      
     
**** Terraform

     #+begin_src emacs-lisp
       (use-package terraform-mode
	 :ensure-system-package (
	  (terraform . terraform)
	  (terraform-ls . "brew install hashicorp/tap/terraform-ls")))
     #+end_src
